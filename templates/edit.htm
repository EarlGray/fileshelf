{% extends "tmpl.htm" %}
{% block style %}
<style>
#text-editor {
  font-family: monospace;
  font-size: 11pt;
  height: 85%;
}
#editor-settings {
  padding: 0.5em 0;
}
#editor-settings select {
  margin-right: 3em;
  position: fixed;
}
#editor-commands {
}
#settings-container {
  margin: 0 1em;
  float: right;
}
.CodeMirror {
  border: 1px solid #888;
}
#save-btn {
  font-size: 12pt;
  border-radius: 0.4em;

  border: none;
  background-color: blue;
  border: 2px solid blue;
  color: white;
}
#save-btn:disabled {
  border: 2px solid grey;
  background-color: white;
  color: #aaa;
}
.save-btn-failed {
  background-color: red;
  border: 2px solid red;
  color: white;
}
.save-btn-saving {
  background-color: white;
  border: 2px solid grey;
  color: green;
}
</style>
{% endblock %}

{% block toolbar %}
<span id="editor-commands">
  <button id="save-btn" disabled>Save</button>
</span>
<details id="settings-container">
  <summary>Settings</summary>
  <div id="editor-settings">
    <hr>
    <p>
    <label for="editor-keymap">Keymap:</label>
    <select id="editor-keymap">
      <option value="vim" selected>vim</option>
      <option value="emacs">emacs</option>
      <option value="sublime">sublime</option>
    </select>

    <p>
    <label for="editor-mode">Mode:</label>
    <select id="editor-mode">
      <option value="" selected>Select mode...</option>
      <!--option value="apl">APL</option-->
      <option value="clike" data-fext="c,cc,cpp,java">C-like</option>
      <option value="css" data-fext="css" data-mime="text/css">CSS</option>
      <option value="diff" data-fext="diff,patch">Diff</option>
      <option value="erlang" data-fext="erl">Erlang</option>
      <option value="forth" data-fext="f">Forth</option>
      <option value="gas" data-fext="S,s,asm">GNU assembly</option>
      <option value="go" data-fext="go">Go</option>
      <option value="groovy" data-fext="groovy">Groobvy</option>
      <option value="haskell-literate" data-fext="lhs">Haskell (literate)</option>
      <option value="haskell" data-fext="hs">Haskell</option>
      <!--option value="haxe">Haxe</option-->
      <!--option value="htmlmixed" data-mime="text/html" data-fext="htm,html">HTML</option-->
      <option value="javascript" data-mime="application/javascript" data-fext="js">Javascript</option>
      <option value="jinja2">Jinja2</option>
      <!--option value="julia">Julia</option-->
      <option value="lua" data-fext="lua">Lua</option>
      <option value="markdown" data-fext="md,markdown">Markdown</option>
      <option value="mbox" data-fext="mbox">mbox</option>
      <option value="mllike" data-fext="ml">Ocaml/SML</option>
      <option value="perl" data-fext="pl,pm">Perl</option>
      <option value="php" data-fext="php">PHP</option>
      <option value="powershell" data-fext="ps1">Powershell</option>
      <!--option value="protobuf">Protobuf</option-->
      <!--option value="puppet">Puppet</option-->
      <option value="python" data-mime="text/x-python">Python</option>
      <option value="r" data-fext="r">R</option>
      <option value="ruby" data-fext="rb">Ruby</option>
      <option value="rust" data-fext="rs">Rust</option>
      <option value="scheme" data-fext="scm">Scheme</option>
      <option value="shell" data-mime="text/x-sh" data-fext="sh">shell</option>
      <option value="sql" data-fext="sql">SQL</option>
      <option value="stex" data-fext="tex"
          data-src="https://codemirror.net/mode/stex/stex.js">Tex, Latex</option>
      <option value="swift" data-fext="swift">Swift</option>
      <option value="troff" data-fext="tr">Troff</option>
      <option value="verilog" data-fext="v">Verilog</option>
      <option value="vue" data-fext="vue">Vue.js</option>
      <option value="xml" data-mime="application/xml" data-fext="xml,htm,html">XML, HTML</option>
      <option value="yaml" data-fext="yaml">YAML</option>
    </select>

    <!-- TODO -->
    <p>
    <!--label for="select">Tabsize</label>
    <select id="editor-tabsize">
      <option value="2">2</option>
      <option value="4" selected>4</option>
      <option value="8">8</option>
    </select-->

    <!-- TODO: font -->

    <p>
    <label>Show line numbers:&nbsp;</label><input id="editor-line-numbers" type="checkbox">

    <p>
    <label>Line wrap:&nbsp;</label><input id="editor-wrap-lines" type="checkbox">

    <hr>
    <p>
    <label for="editor-font">Font family:</label>
    <select id="editor-font">
      <option value="monospace" selected>monospace</option>
      <option value="sans">sans</option>
      <option value="serif">serif</option>
      <option value="PT Mono">PT Mono</option>
      <option value="Menlo">Menlo</option>
      <option value="Courier New">Courier New</option>
      <option value="Liberation Mono">Liberation Mono</option>
    </select>

    <p>
    <label for="editor-font-size">Font size:</label>
    <input id="editor-font-size" type="number" min="7" max="36" value="10">

  </div>
</details>
{% endblock %}

{% block body %}
<textarea id="text-editor" cols="90" rows="15"
    spellcheck="false" autofocus>
{{ text }}
</textarea>
<script>
var mimetype = "{{ mimetype }}";

var the_editor;
var textarea = document.querySelector('#text-editor');

var loadedCache = {};
var loadCodemirror = function (path, loaded, src) {
  if (!src)
    src = "{{ codemirror_root }}/" + path;

  if (loadedCache[src])
    return loaded();

  var js_el = document.createElement('script');
  js_el.onload = function () {
    loadedCache[src] = true;
    loaded();
  };
  js_el.src = src;
  var page = document.querySelector('#page');
  page.appendChild(js_el);
};

var saveText = function () {
  console.log('saving...');
  var text = the_editor.getValue();
  var url = location.pathname + '?update';

  var saveButton = document.querySelector('#save-btn');
  saveButton.classList.add('save-btn-saving');

  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function () {
    if (xhr.readyState !== XMLHttpRequest.DONE)
      return;

    saveButton.classList.remove('save-btn-saving');
    if (xhr.status == 200) {
      the_editor.markClean();
      saveButton.disabled = true;
      console.log('UPDATE: xhr.responseText: ' + xhr.responseText);
    } else {
      saveButton.classList.add('save-btn-failed');
      console.log('UPDATE: xhr.status = ' + xhr.status);
    }
  };
  xhr.onerror = function () {
    console.log('xhr error');
  };
  xhr.open('POST', url);
  xhr.setRequestHeader('Content-Type', 'text/plain');
  xhr.send(text);
};

window.onload = function () {
  var $ = document.querySelector;
  var selectMode = document.querySelector('select#editor-mode');

  var detectMode = function () {
    var the_ext = window.location.pathname.split('.');
    if (the_ext.length < 2)
      return;
    the_ext = (function (a) { return a[a.length-1]; })(the_ext);
    console.log('detecting mode for extension '  + the_ext);

    for (var i = 0; i < selectMode.children.length; ++i) {
      var opt = selectMode.children[i];
      var mime = opt.getAttribute('data-mime');
      if (mime && mime === mimetype)
        return i;

      var file_exts = opt.getAttribute('data-fext');
      if (!file_exts) continue;
      file_exts = file_exts.split(',');
      if (file_exts.indexOf(the_ext) >= 0)
        return i;
    }
    return null;
  };

  CodeMirror.commands.save = saveText;

  the_editor = CodeMirror.fromTextArea(textarea, {
      lineNumbers: true
  });
  the_editor.focus();


  /* mode */
  selectMode.onchange = function (event) {
    var mode_changed = function () {
      the_editor.setOption('mode', mode);
      console.log('editor mode changed to ' + (mode ? mode : 'plain'));
    };
    var mode_opt = selectMode.selectedOptions[0];
    var mode = mode_opt.value;
    if (!mode)
      return mode_changed();
    var mode_src = mode_opt.getAttribute('data-src');
    console.log('mode_src = ' + mode_src);

    loadCodemirror('mode/'+mode+'/'+mode+'.min.js', mode_changed, mode_src);
  };
  
  var mode_index = detectMode();
  if (mode_index) {
    var mode_opt = selectMode.options[mode_index];
    console.log('detected mode: '+mode_opt.value+' ('+mode_index+')');
    mode_opt.selected = true;
    selectMode.onchange();
  }

  /* keymap */
  var selectKeymap = document.querySelector('select#editor-keymap');
  selectKeymap.onchange = function () {
    var keymap_opt = selectKeymap.selectedOptions[0];
    var keymap = keymap_opt.value;

    loadCodemirror('keymap/' + keymap + '.min.js', function () {
      the_editor.setOption('keyMap', keymap);
      console.log('editor keymap changed to ' + keymap);
    });
  };

  var keymap = selectKeymap.selectedOptions[0].value;
  console.log('selected keymap: ' + keymap);
  selectKeymap.onchange();

  /* font */
  selectFontFamily = document.querySelector('select#editor-font');
  selectFontFamily.onchange = function () {
    var opt = selectFontFamily.selectedOptions[0];
    var val = opt.value;

    var cm = document.querySelector('.CodeMirror');
    cm.style.fontFamily = val;
  };

  /* font size */
  var selectFontSize = document.querySelector('input#editor-font-size');
  selectFontSize.onchange = function (event) {
    var fontsize = this.value + 'pt';
    console.log('font size changed to ' + fontsize);

    var cmdiv = document.querySelector('.CodeMirror');
    cmdiv.style.fontSize = fontsize;
  };
  selectFontSize.onchange();

  /* show line numbers */
  var checkLineNumbers = document.querySelector('input#editor-line-numbers');
  var toggleLineNumbers = function () {
    the_editor.setOption('lineNumbers', checkLineNumbers.checked);
  };
  checkLineNumbers.checked = true;
  checkLineNumbers.onchange = toggleLineNumbers;
  checkLineNumbers.onchange();

  /* line wrap */
  var checkLineWrap = document.querySelector('input#editor-wrap-lines');
  checkLineWrap.onchange = function () {
    the_editor.setOption('lineWrapping', checkLineWrap.checked);
  };
  checkLineWrap.checked = true;
  checkLineWrap.onchange();

  /* resize */
  var cmdiv = document.querySelector('.CodeMirror');
  var cmtop = cmdiv.offsetTop;
  cmdiv.style.height = 'calc(100vh - 1em - '+cmtop+'px)';

  /* save button */
  var saveButton = document.querySelector('#save-btn');
  saveButton.onclick = saveText;
  saveButton.disabled = true;
  the_editor.on('change', function () {
    saveButton.disabled = the_editor.isClean();
  });

  /* TODO: saving settings into cookies */
};
</script>
{% endblock %}
